== The case for using microservices in BankPlus

Reflecting back on the architecture of the application so far, it is noticeable that multiple teams may be responsible for developing and operating this application is production. As more and more features are requested, there is a certain limit would be placed on how much productivity may be achieved if all such development was handled by a single team. Naturally, it makes sense to segregate development activities into multiple teams. But there is a catch - teams still depend on ensuring that changes made by one another do not break the application. Breaking the application doing development more or less eats away at the productivity returns gained by operating multiple teams.

The answer therefore lies in having multiple teams develop and deploy various components of the application such that changes made by one time do not affect another team. This requires the use of contracts between teams and the components they work on. This the primary case for applications using a microservices style application.

In the case of BankPlus, this entails having different teams for the customer service, the transactions (deposits, payments, withdrawals) service, and the financial accounting service. Each of these services would expose a contract via a REST API to it's clients. The business gains through the opportunity to allocate more developers to work on features that are critical to financial and operational success. For instance, if the business decided to support lending operations, the transactions service would be the point of focus. Features would be added to this service, and at the very most, on it's dependent services. It is very unlikely that an unrelated service like the customer service would undergo a change. Change is in a way localized to a single area. The additional benefit is that when the change needs to be deployed, other services need not be deployed - they continue to operate as is.

What is not immediately observable is that utlizing microservices as an architectural style, allows CXOs, product managers and the like to stabilize their business architecture and create microservices to line up various constituent services in the enterprise/technical architecture. The impact of changes to the business architecture on the technical architecture could also be studied before pushing down a change. Clear lines of responsibility would exist on what teams would be involved in implementing a change to the business. In the case of BankPlus, if this was not visible earlier, there will be a one-to-one mapping between the various services in the business architecture and the technical/enterprise architecture, allowing the payment bank the flexibility to prioritize changes in one business function over another and to roll out the same to customers.